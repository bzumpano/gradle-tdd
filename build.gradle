buildscript {
    ext {
        springBootVersion = '1.3.3.RELEASE'
        flywayVersion = '3.2.1'
        assetPipelineVersion = '2.7.2'
        fingerprintVersion = '0.3'
        cargoVersion = '2.2.2'
    }
    repositories {
        jcenter()
        mavenLocal()
        mavenCentral()
    }
    dependencies {
        classpath "org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}"
        classpath "org.flywaydb:flyway-gradle-plugin:${flywayVersion}"
        classpath "com.bertramlabs.plugins:asset-pipeline-gradle:${assetPipelineVersion}"
        classpath "com.reuters:gradle-fingerprint-plugin:${fingerprintVersion}"
        classpath "com.bmuschko:gradle-cargo-plugin:${cargoVersion}"
    }
}

apply plugin: 'java'
apply plugin: 'pmd'
apply plugin: 'eclipse-wtp'
apply plugin: 'idea'
apply plugin: 'spring-boot'
apply plugin: 'war'
apply plugin: 'org.flywaydb.flyway'
apply plugin: 'com.bertramlabs.asset-pipeline'
apply plugin: 'com.bmuschko.cargo'


sourceCompatibility = 1.8
targetCompatibility = 1.8


repositories {
    mavenCentral()
}


configurations {
    providedRuntime
}


task wrapper(type: Wrapper) {
    gradleVersion = '2.11'
}


ext {
    // default: development. Override via command line arg:
    // ./gradlew myTask -Dprofile=[dev|test|demo|prod]
    profile = System.getProperty("profile", "dev")


    // Flyway
    Properties props = new Properties()
    props.load(new FileInputStream("${projectDir}/src/main/resources/flyway.properties"))

    def prefix = "flyway.${profile}"

    flywayUrl = props.getProperty("${prefix}.url")
    flywayUser = props.getProperty("${prefix}.user")
    flywayPassword = props.getProperty("${prefix}.password")
    flywaySchemas = props.getProperty("${prefix}.schemas")
    flywayLocations = props.getProperty("${prefix}.locations")
}


task fingerprint(type: com.reuters.gradle.FingerprintTask) {
    description = 'fingerprint front end resources'
    group = 'build'

    source fileTree(dir: "${buildDir}/assets", include: ['**/*'], excludes: ["manifest.properties"])
    destinationDir = file("${buildDir}/fingerprint")

    // replace references to javascript and css files in html and jsp files
    replaceInFiles = fileTree(dir: "${buildDir}/resources", include: ['**/*.html'])
    replacedDestDir = file("${buildDir}/resources")
}


war {
    it.dependsOn fingerprint

    baseName = 'gradle-tdd'
    version = '0.0.1-SNAPSHOT'


    from ("${buildDir}/assets") {
        includes ["manifest.properties"]
        into "WEB-INF/classes/assets"
    }

    from ("${buildDir}/fingerprint") {
        into "WEB-INF/classes/assets"
    }
}


bootRepackage {

    // SpringBootDevTools
    if (profile == 'dev') {
        bootRun.addResources = true
    } else {
        excludeDevtools = true
    }
}


processResources {
     filesMatching("**/*.yml") {
        filter org.apache.tools.ant.filters.ReplaceTokens, tokens: [
                profile: profile,
                flywayLocations: flywayLocations
        ]
     }

    // make sure it runs everytime! (never UP-TO-DATE)
    outputs.upToDateWhen { false }
}


// this is needed because bootRun runs locally (and resources will not be
// processed to have application.yml tokens replaced
tasks.withType(org.springframework.boot.gradle.run.BootRunTask) {
    systemProperty 'spring.profiles.active', profile
    systemProperty 'flyway.locations', flywayLocations
}


test {
    systemProperty "spring.profiles.active", "test"
}


pmd {
    consoleOutput = true
    ruleSets = [
                "java-basic",
                "java-braces",
                "java-strings",
                "java-clone",
                "java-imports",
                "java-migrating",
                "java-j2ee",
//                "java-coupling",
                "java-junit",
                "java-optimizations",
                "java-codesize",
//                "java-design",
                "java-sunsecure",
                "java-unusedcode"
                ]
}


flyway {
    url = flywayUrl
    user = flywayUser
    password = flywayPassword
    schemas = flywaySchemas
    locations = Arrays.asList(flywayLocations.split(","))
}


task flywayLog << {
    println "    db: ${flyway.user}@${flyway.url} - schema: ${flyway.schemas}"
}
flywayMigrate.dependsOn(flywayLog)
flywayInfo.dependsOn(flywayLog)
flywayRepair.dependsOn(flywayLog)
flywayClean.dependsOn(flywayLog)
flywayValidate.dependsOn(flywayLog)
flywayInit.dependsOn(flywayLog)


assets {
// @see http://bertramdev.github.io/asset-pipeline/asset/pipeline/AssetCompiler.html#options
    enableGzip = false
    enableDigests = false
    enableSourceMaps = false
}


cargo {

    Properties props = new Properties()
    props.load(new FileInputStream("${projectDir}/src/main/resources/cargo.properties"))

    def prefix = "cargo.${profile}"

    flywayUrl = props.getProperty("${prefix}.url")


    containerId = 'tomcat8x'
    port = Integer.valueOf(props.getProperty("${prefix}.port"))

    deployable {
        context = project.name
    }

    remote {
        hostname = props.getProperty("${prefix}.hostname")
        username = props.getProperty("${prefix}.username")
        password = props.getProperty("${prefix}.password")
    }
}
cargoDeployRemote.dependsOn war
cargoRedeployRemote.dependsOn war


dependencies {

//  compile('org.springframework.boot:spring-boot-starter-security')
    compile('org.springframework.boot:spring-boot-starter-thymeleaf')
    compile('org.springframework.boot:spring-boot-starter-data-jpa')
    compile('org.springframework.boot:spring-boot-starter-web')
    compile("org.springframework.boot:spring-boot-devtools")
    compile('org.flywaydb:flyway-core')

    // asset-pipeline
    compile("org.codehaus.groovy:groovy")
    compile("com.bertramlabs.plugins:asset-pipeline-spring-boot:${assetPipelineVersion}")

    runtime('com.h2database:h2')

    providedRuntime('org.springframework.boot:spring-boot-starter-tomcat')

    testCompile('org.springframework.boot:spring-boot-starter-test')
}
